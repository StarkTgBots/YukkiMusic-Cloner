import asyncio
import os
from pyppeteer import launch
from datetime import datetime

EDGE_EXECUTABLE_PATH = "/usr/bin/google-chrome"
COOKIES_FILE = "./cookies/cookies.txt"

async def load_cookies(page):
    """Loads cookies from cookies.txt into the browser session"""
    if not os.path.exists(COOKIES_FILE):
        print("[INFO] No cookies.txt found, starting fresh login session.")
        return
    
    cookies = []
    with open(COOKIES_FILE, "r", encoding="utf-8") as file:
        for line in file:
            if line.startswith("#") or not line.strip():
                continue  # Skip comments and empty lines
            
            parts = line.strip().split("\t")
            if len(parts) == 7:
                domain, _, path, secure, expiry, name, value = parts
                cookies.append({
                    "domain": domain,
                    "path": path,
                    "secure": secure == "TRUE",
                    "expires": int(expiry) if expiry.isdigit() else 0,
                    "name": name,
                    "value": value,
                    "httpOnly": False  # Since Netscape format doesn't store this, assume False
                })

    if cookies:
        print(f"[INFO] Loading {len(cookies)} cookies into the browser...")
        await page.setCookie(*cookies)

async def save_cookies(page):
    """Saves the updated cookies back to cookies.txt"""
    cookies = await page._client.send("Network.getAllCookies")

    cookies_txt = [
        "# Netscape HTTP Cookie File",
        "# This file is generated by yt-dlp.  Do not edit.\n"
    ]

    for cookie in cookies["cookies"]:
        domain = f".{cookie['domain']}" if not cookie['domain'].startswith('.') else cookie['domain']
        path = cookie['path']
        secure = "TRUE" if cookie['secure'] else "FALSE"
        expiry = int(cookie.get("expires", 0)) if cookie.get("expires", 0) > 0 else 0  # Fix expiry issue
        name = cookie['name']
        value = cookie['value']
        cookies_txt.append(f"{domain}\tTRUE\t{path}\t{secure}\t{expiry}\t{name}\t{value}")

    with open(COOKIES_FILE, "w", encoding="utf-8") as file:
        file.write("\n".join(cookies_txt))
    
    print(f"[INFO] Cookies saved successfully!")

async def refresh_youtube_session():
    """Launch browser, load cookies, refresh YouTube session, and save new cookies"""
    while True:
        print(f"[{datetime.now()}] Launching browser...")
        browser = await launch(
            headless=True,
            executablePath=EDGE_EXECUTABLE_PATH,
            args=["--no-sandbox", "--disable-setuid-sandbox"]
        )
        page = await browser.newPage()

        # Load previous cookies
        await load_cookies(page)

        # Open YouTube with cookies loaded
        print(f"[{datetime.now()}] Opening YouTube...")
        await page.goto("https://www.youtube.com", {"waitUntil": "networkidle2"})

        # Wait for the page to load
        await asyncio.sleep(5)

        # Refresh YouTube session
        print(f"[{datetime.now()}] Refreshing session to keep login active...")
        await page.reload({"waitUntil": "networkidle2"})

        # Wait for 20 seconds (simulate activity)
        await asyncio.sleep(20)

        screenshot_path = "youtube_login.png"
        print(f"[{datetime.now()}] Saving screenshot as {screenshot_path}...")
        await page.screenshot({"path": screenshot_path, "fullPage": True})


        # Save updated cookies
        await save_cookies(page)

        # Close browser
        await browser.close()

        # Wait for 1 hour before refreshing again
        print(f"[{datetime.now()}] Sleeping for 1 hour...\n")
        await asyncio.sleep(3600)

# Run the function
asyncio.run(refresh_youtube_session())
